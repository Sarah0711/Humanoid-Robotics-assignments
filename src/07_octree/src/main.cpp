#include <windows-helpers.h>
#include <octree/Octree.h>
#include <octree/FileIO.h>
#include <iostream>

using namespace octree;

int main(int /* argc */, char ** /*argv*/) {
	const std::string packagePath = PROJECT_SOURCE_DIR;
	FileIO fio;

	const Eigen::Vector3d corner1(-2, -8, -5);
	const Eigen::Vector3d corner2(14,  8, 11);
	const size_t maxDepth = 4;

	Octree octree(corner1, corner2, maxDepth);

	const Eigen::Vector3d points[147] = {
		Eigen::Vector3d(0.5, 0.5, 0.5),
		Eigen::Vector3d(0.5, 0.5, 1.5),
		Eigen::Vector3d(0.5, 0.5, 2.5),
		Eigen::Vector3d(0.5, 0.5, 3.5),
		Eigen::Vector3d(0.5, 0.5, 4.5),
		Eigen::Vector3d(1.5, 0.5, 2.5),
		Eigen::Vector3d(2.5, 0.5, 2.5),
		Eigen::Vector3d(3.5, 0.5, 2.5),
		Eigen::Vector3d(3.5, 0.5, 3.5),
		Eigen::Vector3d(3.5, 0.5, 4.5),
		Eigen::Vector3d(3.5, 0.5, 1.5),
		Eigen::Vector3d(3.5, 0.5, 0.5),
		Eigen::Vector3d(6.5, 0.5, 0.5),
		Eigen::Vector3d(6.5, 0.5, 1.5),
		Eigen::Vector3d(6.5, 0.5, 4.5),
		Eigen::Vector3d(6.5, 0.5, 3.5),
		Eigen::Vector3d(6.5, 0.5, 2.5),
		Eigen::Vector3d(7.5, 0.5, 4.5),
		Eigen::Vector3d(8.5, 0.5, 4.5),
		Eigen::Vector3d(7.5, 0.5, 2.5),
		Eigen::Vector3d(8.5, 0.5, 2.5),
		Eigen::Vector3d(9.5, 0.5, 0.5),
		Eigen::Vector3d(9.5, 0.5, 3.5),
		Eigen::Vector3d(9.0, 0.5, 1.5),
		Eigen::Vector3d(9.5, 0.5, 4.5),
		Eigen::Vector3d(12.5, 0.5, 0.5),
		Eigen::Vector3d(12.5, 0.5, 1.5),
		Eigen::Vector3d(12.5, 0.5, 4.5),
		Eigen::Vector3d(12.5, 0.5, 3.5),
		Eigen::Vector3d(12.5, 0.5, 2.5),
		Eigen::Vector3d(12.5, -0.5, 0.5),
		Eigen::Vector3d(12.5, -1.5, 0.5),
		Eigen::Vector3d(12.5, -2.5, 0.5),
		Eigen::Vector3d(0.5, 7.5, -4.5),
		Eigen::Vector3d(-0.5, 7.5, -4.5),
		Eigen::Vector3d(-1.5, 7.5, -4.5),
		Eigen::Vector3d(1.5, 7.5, -4.5),
		Eigen::Vector3d(1.5, 6.5, -4.5),
		Eigen::Vector3d(-1.5, 6.5, -4.5),
		Eigen::Vector3d(-0.5, 6.5, -4.5),
		Eigen::Vector3d(0.5, 6.5, -4.5),
		Eigen::Vector3d(0.5, 5.5, -4.5),
		Eigen::Vector3d(-0.5, 5.5, -4.5),
		Eigen::Vector3d(-1.5, 5.5, -4.5),
		Eigen::Vector3d(1.5, 5.5, -4.5),
		Eigen::Vector3d(1.5, 4.5, -4.5),
		Eigen::Vector3d(-1.5, 4.5, -4.5),
		Eigen::Vector3d(-0.5, 4.5, -4.5),
		Eigen::Vector3d(0.5, 4.5, -4.5),
		Eigen::Vector3d(0.5, 4.5, -3.5),
		Eigen::Vector3d(-0.5, 4.5, -3.5),
		Eigen::Vector3d(-1.5, 4.5, -3.5),
		Eigen::Vector3d(1.5, 4.5, -3.5),
		Eigen::Vector3d(1.5, 5.5, -3.5),
		Eigen::Vector3d(-1.5, 5.5, -3.5),
		Eigen::Vector3d(-0.5, 5.5, -3.5),
		Eigen::Vector3d(0.5, 5.5, -3.5),
		Eigen::Vector3d(0.5, 6.5, -3.5),
		Eigen::Vector3d(-0.5, 6.5, -3.5),
		Eigen::Vector3d(-1.5, 6.5, -3.5),
		Eigen::Vector3d(1.5, 6.5, -3.5),
		Eigen::Vector3d(1.5, 7.5, -3.5),
		Eigen::Vector3d(-1.5, 7.5, -3.5),
		Eigen::Vector3d(-0.5, 7.5, -3.5),
		Eigen::Vector3d(0.5, 7.5, -3.5),
		Eigen::Vector3d(0.5, 7.5, -2.5),
		Eigen::Vector3d(-0.5, 7.5, -2.5),
		Eigen::Vector3d(-1.5, 7.5, -2.5),
		Eigen::Vector3d(1.5, 7.5, -2.5),
		Eigen::Vector3d(1.5, 6.5, -2.5),
		Eigen::Vector3d(-1.5, 6.5, -2.5),
		Eigen::Vector3d(-0.5, 6.5, -2.5),
		Eigen::Vector3d(0.5, 6.5, -2.5),
		Eigen::Vector3d(0.5, 5.5, -2.5),
		Eigen::Vector3d(-0.5, 5.5, -2.5),
		Eigen::Vector3d(-1.5, 5.5, -2.5),
		Eigen::Vector3d(1.5, 5.5, -2.5),
		Eigen::Vector3d(1.5, 4.5, -2.5),
		Eigen::Vector3d(-1.5, 4.5, -2.5),
		Eigen::Vector3d(-0.5, 4.5, -2.5),
		Eigen::Vector3d(0.5, 4.5, -2.5),
		Eigen::Vector3d(0.5, 4.5, -1.5),
		Eigen::Vector3d(-0.5, 4.5, -1.5),
		Eigen::Vector3d(-1.5, 4.5, -1.5),
		Eigen::Vector3d(1.5, 4.5, -1.5),
		Eigen::Vector3d(1.5, 5.5, -1.5),
		Eigen::Vector3d(-1.5, 5.5, -1.5),
		Eigen::Vector3d(-0.5, 5.5, -1.5),
		Eigen::Vector3d(0.5, 5.5, -1.5),
		Eigen::Vector3d(0.5, 6.5, -1.5),
		Eigen::Vector3d(-0.5, 6.5, -1.5),
		Eigen::Vector3d(-1.5, 6.5, -1.5),
		Eigen::Vector3d(1.5, 6.5, -1.5),
		Eigen::Vector3d(1.5, 7.5, -1.5),
		Eigen::Vector3d(-1.5, 7.5, -1.5),
		Eigen::Vector3d(-0.5, 7.5, -1.5),
		Eigen::Vector3d(0.5, 7.5, -1.5),
		Eigen::Vector3d(1.5, 1.5, -3.5),
		Eigen::Vector3d(-1.5, 1.5, -3.5),
		Eigen::Vector3d(-0.5, 1.5, -3.5),
		Eigen::Vector3d(0.5, 1.5, -3.5),
		Eigen::Vector3d(0.5, 1.5, -4.5),
		Eigen::Vector3d(-0.5, 1.5, -4.5),
		Eigen::Vector3d(-1.5, 1.5, -4.5),
		Eigen::Vector3d(1.5, 1.5, -4.5),
		Eigen::Vector3d(1.5, 0.5, -4.5),
		Eigen::Vector3d(-1.5, 0.5, -4.5),
		Eigen::Vector3d(-0.5, 0.5, -4.5),
		Eigen::Vector3d(0.5, 0.5, -4.5),
		Eigen::Vector3d(0.5, 0.5, -3.5),
		Eigen::Vector3d(-0.5, 0.5, -3.5),
		Eigen::Vector3d(-1.5, 0.5, -3.5),
		Eigen::Vector3d(1.5, 0.5, -3.5),
		Eigen::Vector3d(0.5, 0.5, -4.5),
		Eigen::Vector3d(0.5, -0.5, -4.5),
		Eigen::Vector3d(-0.5, -0.5, -4.5),
		Eigen::Vector3d(-1.5, -0.5, -4.5),
		Eigen::Vector3d(1.5, -0.5, -4.5),
		Eigen::Vector3d(1.5, -1.5, -4.5),
		Eigen::Vector3d(-1.5, -1.5, -4.5),
		Eigen::Vector3d(-0.5, -1.5, -4.5),
		Eigen::Vector3d(0.5, -1.5, -4.5),
		Eigen::Vector3d(0.5, 2.5, -4.5),
		Eigen::Vector3d(1.5, 2.5, -3.5),
		Eigen::Vector3d(-1.5, 2.5, -3.5),
		Eigen::Vector3d(-0.5, 2.5, -3.5),
		Eigen::Vector3d(0.5, 2.5, -3.5),
		Eigen::Vector3d(0.5, 2.5, -4.5),
		Eigen::Vector3d(-0.5, 2.5, -4.5),
		Eigen::Vector3d(-1.5, 2.5, -4.5),
		Eigen::Vector3d(1.5, 2.5, -4.5),
		Eigen::Vector3d(1.5, 3.5, -4.5),
		Eigen::Vector3d(-1.5, 3.5, -4.5),
		Eigen::Vector3d(-0.5, 3.5, -4.5),
		Eigen::Vector3d(0.5, 3.5, -4.5),
		Eigen::Vector3d(0.5, 3.5, -3.5),
		Eigen::Vector3d(-0.5, 3.5, -3.5),
		Eigen::Vector3d(-1.5, 3.5, -3.5),
		Eigen::Vector3d(1.5, 3.5, -3.5),
		Eigen::Vector3d(1.5, 3.5, -2.5),
		Eigen::Vector3d(-1.5, 3.5, -2.5),
		Eigen::Vector3d(-0.5, 3.5, -2.5),
		Eigen::Vector3d(0.5, 3.5, -2.5),
		Eigen::Vector3d(0.5, 2.5, -2.5),
		Eigen::Vector3d(-0.5, 2.5, -2.5),
		Eigen::Vector3d(-1.5, 2.5, -2.5),
		Eigen::Vector3d(1.5, 2.5, -2.5)
	};

	for (size_t i = 0; i < 147; ++i) {
		octree.insertPoint(points[i]);
	}

	const std::string outputFile = packagePath + "/data/result.txt";
	if (fio.writeToFile(octree, outputFile)) {
		std::cout << "Wrote " << fio.getNumWritten() << " nodes to " << outputFile << ". " << std::endl;
		std::cout << "A voxel grid with the same resolution would need " << pow(pow(2, maxDepth), 3) << " cells." << std::endl;
	}

    wait();
	return 0;
}
